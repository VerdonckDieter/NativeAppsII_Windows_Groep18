// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Travel_list_API.Data;

namespace Travel_list_API.Migrations
{
    [DbContext(typeof(TravelListContext))]
    partial class TravelListContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Travel_list_API.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2020, 12, 26, 15, 37, 28, 827, DateTimeKind.Local).AddTicks(5803),
                            Email = "client@gmail.com",
                            FirstName = "Pog",
                            LastName = "Champ"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2020, 12, 26, 15, 37, 28, 829, DateTimeKind.Local).AddTicks(3426),
                            Email = "client2@gmail.com",
                            FirstName = "Ayaya",
                            LastName = "Clap"
                        });
                });

            modelBuilder.Entity("Travel_list_API.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Added")
                        .HasColumnType("bit");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TravelListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TravelListId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Added = false,
                            Amount = 1,
                            Category = 0,
                            Name = "Item 1",
                            TravelListId = 1
                        },
                        new
                        {
                            Id = 2,
                            Added = true,
                            Amount = 2,
                            Category = 0,
                            Name = "Item 2",
                            TravelListId = 1
                        },
                        new
                        {
                            Id = 3,
                            Added = true,
                            Amount = 5,
                            Category = 0,
                            Name = "Item 3",
                            TravelListId = 2
                        },
                        new
                        {
                            Id = 4,
                            Added = false,
                            Amount = 3,
                            Category = 0,
                            Name = "Item 4",
                            TravelListId = 2
                        },
                        new
                        {
                            Id = 5,
                            Added = false,
                            Amount = 1,
                            Category = 0,
                            Name = "Item 5",
                            TravelListId = 3
                        },
                        new
                        {
                            Id = 6,
                            Added = true,
                            Amount = 8,
                            Category = 0,
                            Name = "Item 6",
                            TravelListId = 4
                        },
                        new
                        {
                            Id = 7,
                            Added = false,
                            Amount = 6,
                            Category = 0,
                            Name = "Item 7",
                            TravelListId = 4
                        },
                        new
                        {
                            Id = 8,
                            Added = true,
                            Amount = 9,
                            Category = 0,
                            Name = "Item 8",
                            TravelListId = 5
                        });
                });

            modelBuilder.Entity("Travel_list_API.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TravelListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TravelListId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Travel_list_API.Models.TravelList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("TravelLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            EndDate = new DateTime(2020, 12, 31, 15, 37, 28, 830, DateTimeKind.Local).AddTicks(3555),
                            Name = "Test1",
                            StartDate = new DateTime(2020, 12, 26, 15, 37, 28, 830, DateTimeKind.Local).AddTicks(3236)
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 1,
                            EndDate = new DateTime(2020, 12, 31, 15, 37, 28, 830, DateTimeKind.Local).AddTicks(4192),
                            Name = "Test2",
                            StartDate = new DateTime(2020, 12, 26, 15, 37, 28, 830, DateTimeKind.Local).AddTicks(4174)
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 1,
                            EndDate = new DateTime(2020, 12, 31, 15, 37, 28, 830, DateTimeKind.Local).AddTicks(4210),
                            Name = "Test3",
                            StartDate = new DateTime(2020, 12, 26, 15, 37, 28, 830, DateTimeKind.Local).AddTicks(4207)
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 2,
                            EndDate = new DateTime(2020, 12, 31, 15, 37, 28, 830, DateTimeKind.Local).AddTicks(4216),
                            Name = "Test4",
                            StartDate = new DateTime(2020, 12, 26, 15, 37, 28, 830, DateTimeKind.Local).AddTicks(4214)
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 2,
                            EndDate = new DateTime(2020, 12, 31, 15, 37, 28, 830, DateTimeKind.Local).AddTicks(4223),
                            Name = "Test5",
                            StartDate = new DateTime(2020, 12, 26, 15, 37, 28, 830, DateTimeKind.Local).AddTicks(4220)
                        });
                });

            modelBuilder.Entity("Travel_list_API.Models.Item", b =>
                {
                    b.HasOne("Travel_list_API.Models.TravelList", null)
                        .WithMany("Items")
                        .HasForeignKey("TravelListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Travel_list_API.Models.Task", b =>
                {
                    b.HasOne("Travel_list_API.Models.TravelList", null)
                        .WithMany("Tasks")
                        .HasForeignKey("TravelListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Travel_list_API.Models.TravelList", b =>
                {
                    b.HasOne("Travel_list_API.Models.Client", null)
                        .WithMany("TravelLists")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
